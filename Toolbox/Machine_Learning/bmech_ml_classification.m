function Mdl=bmech_ml_classification(data, Model_name)
% BMECH_ML_CLASSIFICATION (data,Model_name) trains a classification model
%
% ARGUMENTS
% data        ...   struct, struct returned with train_test_split
% Model_name  ...   string,'BDT'     --> Binary Classification Tree
%                          'NBayes'  --> Naive bayes
%                          'knn'     --> k-Nearest Neighbor Classifier
%                          'Bsvm'    --> Binary support vector machines
%                          'Blinear' --> Binary Linear Classification
%                          'Bkernel' --> Binary Kernel Classification
%                          'Msvm'    --> Multiclass support vector machines
%                          'FF'      --> Forward Feed Neural network
%                          'LSTM'    --> Long short-term memory
%                          'BiLS'  --> Bidirectional Long short-term memory
%                          'CNN'     --> Convolutional neural network
% RETURNS
% Mdl         ...   Trained model
%

if contains(Model_name,'BDT')
    disp('Training Binary Classification Tree')
    Mdl=fitctree(data.x_train,data.y_train,...
        'PredictorNames',data.VariableName,...
        'AlgorithmForCategorical',data.BDT.AlgorithmForCategorical,...
        'MaxNumCategories',data.BDT.MaxNumCategories,...
        'MaxNumSplits',data.BDT.MaxNumSplits,...
        'MergeLeaves',data.BDT.MergeLeaves,...
        'MinLeafSize',data.BDT.MinLeafSize,...
        'MinParentSize',data.BDT.MinParentSize,...
        'Prior',data.Prior);
elseif contains(Model_name,'NBayes')
    disp('Training naive bayes')
    Mdl = fitcnb(data.x_train,data.y_train,...
        'DistributionNames',data.NBayes.DistributionNames,...
        'Kernel',data.NBayes.Kernel,...
        'Support',data.NBayes.Support,...
        'Prior',data.Prior);
elseif contains(Model_name,'knn')
    disp('Training k-Nearest Neighbor Classifier')
    Mdl = fitcknn(data.x_train,data.y_train,...
        'BucketSize',data.knn.BucketSize,...
        'Distance',data.knn.Distance,...
        'Exponent',data.knn.Exponent,...
        'NSMethod',data.knn.NSMethod,...
        'NumNeighbors',data.knn.NumNeighbors,...
        'Prior',data.Prior);
elseif contains(Model_name,'Bsvm')
    disp('Training Binary SVM');
    Mdl = fitcsvm(data.x_train,data.y_train,...
        'BoxConstraint',data.Bsvm.BoxConstraint,...
        'KernelFunction',data.Bsvm.KernelFunction,...
        'KernelScale',data.Bsvm.KernelScale,...
        'KernelOffset',data.Bsvm.KernelOffset,...
        'Solver',data.Bsvm.Solver,...
        'Nu',data.Bsvm.Nu,...
        'KernelScale','auto',...
        'Prior',data.Prior);
elseif contains(Model_name,'Blinear')
    disp('Binary Linear Classification')
    Mdl = fitckernel(data.x_train,data.y_train,...
        'Lambda',data.Blinear.Lambda,...
        'Learner',data.Blinear.Learner,...
        'Prior',data.Prior);

elseif contains(Model_name,'Bkernel')
    disp('Training Binary Kernel Classification')
    Mdl = fitckernel(data.x_train,data.y_train,...
        'Learner',data.Bkernel.Learner,...
        'NumExpansionDimensions',data.Bkernel.NumExpansionDimensions,...
        'KernelScale',data.Bkernel.KernelScale,...
        'Lambda',data.Bkernel.Lambda,...
        'Prior',data.Prior);

elseif contains(Model_name,'Msvm')
    disp('Training multiclass support vector machines')
    Mdl = fitcecoc(data.x_train,data.y_train,...
        'Learners',data.Msvm.Learners,...
        'NumConcurrent',data.Msvm.NumConcurrent,...
        'Prior',data.Prior);
elseif contains(Model_name,'FF')
    disp('Training forward feed neural network')
    Mdl = trainNetwork(data.x_train,data.y_train,data.FF.layers,data.deeplearning.options);
elseif contains(Model_name,'LSTM')
    disp('Training Long shot-term memory neural network')
    Mdl = trainNetwork(data.x_train,data.y_train,data.LSTM.layers,data.deeplearning.options);
elseif contains(Model_name,'BiLS')
    disp('Training Bidirectional Long shot-term memory neural network')
    Mdl = trainNetwork(data.x_train,data.y_train,data.BiLSTM.layers,data.deeplearning.options);
elseif contains(Model_name,'CNN')
    disp('Training Convolutional neural network')
    Mdl = trainNetwork(data.x_train,data.y_train,data.CNN.layers,data.deeplearning.options);
    %elseif contains(Model_name,'FFNN')
    %        net = feedforwardnet(hiddenSizes,trainFcn); % still working
else
    error([Model_name,' model name does not exist check available models'])
end
